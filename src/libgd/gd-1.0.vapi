/* gd-1.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gd", gir_namespace = "Gd", gir_version = "1.0", lower_case_cprefix = "gd_")]
namespace Gd {
	[CCode (cheader_filename = "libgd/gd.h", type_id = "gd_header_menu_button_get_type ()")]
	public class HeaderMenuButton : Gtk.MenuButton, Atk.Implementor, Gd.HeaderButton, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HeaderMenuButton ();
	}
	[CCode (cheader_filename = "libgd/gd.h", type_id = "gd_header_simple_button_get_type ()")]
	public class HeaderSimpleButton : Gtk.Button, Atk.Implementor, Gd.HeaderButton, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HeaderSimpleButton ();
	}
	[CCode (cheader_filename = "libgd/gd.h", type_id = "gd_header_toggle_button_get_type ()")]
	public class HeaderToggleButton : Gtk.ToggleButton, Atk.Implementor, Gd.HeaderButton, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HeaderToggleButton ();
	}
	[CCode (cheader_filename = "libgd/gd.h", type_id = "gd_main_toolbar_get_type ()")]
	public class MainToolbar : Gtk.Toolbar, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Gtk.ToolShell {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MainToolbar ();
		public unowned Gtk.Widget add_button (string? icon_name, string? label, bool pack_start);
		public unowned Gtk.Widget add_menu (string? icon_name, string? label, bool pack_start);
		public unowned Gtk.Widget add_mode (string label);
		public unowned Gtk.Widget add_toggle (string? icon_name, string? label, bool pack_start);
		public void add_widget (Gtk.Widget widget, bool pack_start);
		public void clear ();
		public bool get_show_modes ();
		public void set_labels (string? primary, string? detail);
		public void set_labels_menu (GLib.MenuModel? menu);
		public void set_show_modes (bool show_modes);
		public bool show_modes { get; set; }
	}
	[CCode (cheader_filename = "libgd/gd.h", type_id = "gd_notification_get_type ()")]
	public class Notification : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Notification ();
		public void dismiss ();
		public void set_show_close_button (bool show_close_button);
		public void set_timeout (int timeout_sec);
		[NoAccessorMethod]
		public bool show_close_button { get; set construct; }
		[NoAccessorMethod]
		public int timeout { get; set construct; }
		public virtual signal void dismissed ();
	}
	[CCode (cheader_filename = "libgd/gd.h", type_id = "gd_revealer_get_type ()")]
	public class Revealer : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Revealer ();
		public bool get_child_revealed ();
		public int get_duration ();
		public Gtk.Orientation get_orientation ();
		public bool get_reveal_child ();
		public void set_duration (int duration_msec);
		public void set_orientation (Gtk.Orientation value);
		public void set_reveal_child (bool setting);
		public bool child_revealed { get; }
		public int duration { get; set construct; }
		public Gtk.Orientation orientation { get; set construct; }
		public bool reveal_child { get; set construct; }
	}
	[CCode (cheader_filename = "libgd/gd.h", type_id = "gd_header_button_get_type ()")]
	public interface HeaderButton : Gtk.Button {
		public string get_label ();
		public string get_symbolic_icon_name ();
		public void set_label (string? label);
		public void set_symbolic_icon_name (string? symbolic_icon_name);
		[NoAccessorMethod]
		public abstract string label { owned get; set; }
		[NoAccessorMethod]
		public abstract string symbolic_icon_name { owned get; set; }
		[NoAccessorMethod]
		public abstract bool use_markup { get; set; }
	}
	[CCode (cheader_filename = "libgd/gd.h")]
	public static GLib.Icon create_symbolic_icon (string name, int base_size);
	[CCode (cheader_filename = "libgd/gd.h")]
	public static Gdk.Pixbuf embed_image_in_frame (Gdk.Pixbuf source_image, string frame_image_url, Gtk.Border slice_width, Gtk.Border border_width);
	[CCode (cheader_filename = "libgd/gd.h")]
	public static void entry_focus_hack (Gtk.Widget entry, Gdk.Device device);
}
